plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.5'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'jacoco'
}

group = 'com.interview.task'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(20)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	integrationTestImplementation.extendsFrom testImplementation
	integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

repositories {
	mavenCentral()
}

dependencies {

	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.liquibase:liquibase-core'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	implementation 'org.springframework.boot:spring-boot-starter-logging'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'org.postgresql:postgresql'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
	testImplementation 'org.mockito:mockito-core:4.6.1'
	testImplementation 'org.mockito:mockito-junit-jupiter:4.6.1'

	integrationTestImplementation 'org.springframework.boot:spring-boot-starter-test'
	integrationTestImplementation 'org.mockito:mockito-core:4.6.1'
}

sourceSets {
	integrationTest {
		java.srcDir file('src/integrationTest/java')
		resources.srcDir file('src/integrationTest/resources')
		compileClasspath += sourceSets.main.output + sourceSets.test.output
		runtimeClasspath += sourceSets.main.output + sourceSets.test.output
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.register("integrationTest", Test) {
	description = "Run integration tests"
	group = "verification"
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
	useJUnitPlatform()
	shouldRunAfter tasks.test
}

tasks.named("check") {
	dependsOn(tasks.named("integrationTest"))
}

tasks.jacocoTestReport {
	dependsOn tasks.test
	reports {
		xml.required = true
		html.required = true
		html.outputLocation = layout.buildDirectory.dir("reports/jacoco")
	}
}

tasks.register("jacocoIntegrationTestReport", JacocoReport) {
	dependsOn tasks.integrationTest
	sourceSets sourceSets.main

	executionData.from(fileTree(layout.buildDirectory.dir("jacoco").get().asFile).include("*.exec"))

	reports {
		xml.required = true
		html.required = true
		html.outputLocation = layout.buildDirectory.dir("reports/jacoco/integration").get().asFile
	}
}

tasks.named("check") {
	dependsOn(tasks.named("jacocoIntegrationTestReport"))
}
